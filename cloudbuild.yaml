steps:
  # Step 0: Generate version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Package Flask App (YAML-safe version)
  - name: 'python:3.10-slim'
    id: 'Package Flask App'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y zip
        source /workspace/version.env
        mkdir -p package
        echo "from flask import Flask" > package/app.py
        echo "app = Flask(__name__)" >> package/app.py
        echo "" >> package/app.py
        echo "@app.route('/')" >> package/app.py
        echo "def hello():" >> package/app.py
        echo "    return 'Hello from version $${VERSION_TAG}'" >> package/app.py
        echo "" >> package/app.py
        echo "if __name__ == '__main__':" >> package/app.py
        echo "    app.run(host='0.0.0.0', port=8080)" >> package/app.py
        touch package/__init__.py
        zip -r python-app-$${VERSION_TAG}.nupkg package

  # Step 2: Check/create Artifact Registry repo
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        if ! gcloud artifacts repositories describe generic-nupkg-repo --location=us-central1 --project=onyx-antler-459216-j6; then
          gcloud artifacts repositories create generic-nupkg-repo \
            --repository-format=generic \
            --location=us-central1 \
            --project=onyx-antler-459216-j6
        fi

  # Step 3: Upload .nupkg to Artifact Registry
  - name: "gcr.io/cloud-builders/gcloud"
    id: "Upload nupkg"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        source /workspace/version.env
        gcloud artifacts generic upload \
          --project="onyx-antler-459216-j6" \
          --location="us-central1" \
          --repository="generic-nupkg-repo" \
          --package="source-package" \
          --version="$$VERSION_TAG" \
          --source="python-app-$$VERSION_TAG.nupkg"

# Step 4: Create startup.sh with Flask setup and app run
- name: 'ubuntu'
  id: 'Create startup.sh'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      source /workspace/version.env
      REPO_NAME="generic-nupkg-repo"
      LOCATION="us-central1"
      PROJECT_ID=$$(gcloud config get-value project)
      FILE_NAME="python-app-$$VERSION_TAG.nupkg"
      STARTUP_SCRIPT_PATH="/workspace/startup-$$VERSION_TAG.sh"
      AR_BASE_URL="https://$$LOCATION-artifactregistry.googleapis.com/v1/projects/$$PROJECT_ID/locations/$$LOCATION/repositories/$$REPO_NAME/files"

      echo "#!/bin/bash" > $$STARTUP_SCRIPT_PATH
      echo "echo \"Startup script running for version $$VERSION_TAG\"" >> $$STARTUP_SCRIPT_PATH
      echo "apt-get update -y" >> $$STARTUP_SCRIPT_PATH
      echo "apt-get install -y unzip python3 python3-pip curl jq" >> $$STARTUP_SCRIPT_PATH
      echo "pip3 install flask" >> $$STARTUP_SCRIPT_PATH

      # Correctly escape TOKEN assignment (double $$ to defer to runtime)
      echo "TOKEN=\$$(curl -s -H \\\"Metadata-Flavor: Google\\\" \\\"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\\\" | jq -r .access_token)" >> $$STARTUP_SCRIPT_PATH
      
      # For usage inside the generated script, $$$$TOKEN becomes $$TOKEN at runtime (to avoid substitution here)
      echo "curl -H \\\"Authorization: Bearer $$$$TOKEN\\\" \\" >> $$STARTUP_SCRIPT_PATH

      echo "  -o /tmp/$$FILE_NAME \\" >> $$STARTUP_SCRIPT_PATH
      echo "  \\\"$$AR_BASE_URL/$$FILE_NAME?alt=media\\\"" >> $$STARTUP_SCRIPT_PATH
      echo "mkdir -p /opt/python-app" >> $$STARTUP_SCRIPT_PATH
      echo "unzip -o /tmp/$$FILE_NAME -d /opt/python-app" >> $$STARTUP_SCRIPT_PATH
      echo "nohup python3 /opt/python-app/package/app.py > /var/log/app.log 2>&1 &" >> $$STARTUP_SCRIPT_PATH

      chmod +x $$STARTUP_SCRIPT_PATH


  # Step 5: Create Instance Template with startup script
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        VERSION=$$VERSION_TAG
        STARTUP_SCRIPT_FILE="/workspace/startup-$$VERSION.sh"

        gcloud compute instance-templates create vamsi-template-$$VERSION \
          --machine-type=e2-medium \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --tags=http-server,https-server \
          --metadata-from-file startup-script=$$STARTUP_SCRIPT_FILE

  # Step 6: Create or Update Managed Instance Group (MIG)
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -x
        source /workspace/version.env
        MIG_NAME="vamsi-mig"
        TEMPLATE_NAME="vamsi-template-$$VERSION_TAG"
        ZONE="us-central1-b"

        echo "Checking if MIG $$MIG_NAME exists..."
        if ! gcloud compute instance-groups managed describe $$MIG_NAME --zone=$$ZONE > /dev/null 2>&1; then
          echo "Creating new MIG with template $$TEMPLATE_NAME"
          gcloud compute instance-groups managed create $$MIG_NAME \
            --base-instance-name=vamsi-instance \
            --template=$$TEMPLATE_NAME \
            --size=1 \
            --zone=$$ZONE
        else
          echo "MIG exists. Updating template to $$TEMPLATE_NAME"
          gcloud compute instance-groups managed set-instance-template $$MIG_NAME \
            --template=$$TEMPLATE_NAME \
            --zone=$$ZONE

          echo "Triggering rolling restart..."
          gcloud compute instance-groups managed rolling-action restart $$MIG_NAME \
            --zone=$$ZONE
        fi


options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
