steps:
  # Step 0: Generate version tag
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Generate Version'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        VERSION_TAG="v-$$(date +%Y%m%d-%H%M%S)"
        echo "VERSION_TAG=$$VERSION_TAG" > /workspace/version.env
        echo "Generated version: $$VERSION_TAG"

  # Step 1: Package Python script
  - name: 'ubuntu'
    id: 'Package Python Script'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        mkdir -p package
        echo 'print("Hello from version '$$VERSION_TAG'")' > package/app.py
        touch package/__init__.py
        zip -r python-app-$$VERSION_TAG.nupkg package

  # Step 2: Create Artifact Registry repo
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Generic Repo'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        REPO_NAME="generic-nupkg-repo"
        LOCATION="us-central1"
        gcloud artifacts repositories create $$REPO_NAME \
          --repository-format=generic \
          --location=$$LOCATION \
          --description="Generic repo for .nupkg files" || echo "Repo probably exists."

  # Step 3: Upload .nupkg
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Upload nupkg'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        REPO_NAME="generic-nupkg-repo"
        LOCATION="us-central1"
        FILE="python-app-$$VERSION_TAG.nupkg"
        gcloud artifacts files upload $$FILE --repository=$$REPO_NAME --location=$$LOCATION --quiet

  # Step 4: Create startup.sh with escaped $$$$ and valid YAML
  - name: 'ubuntu'
    id: 'Create startup.sh'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        REPO_NAME="generic-nupkg-repo"
        LOCATION="us-central1"
        PROJECT_ID=$$(gcloud config get-value project)
        FILE_NAME="python-app-$$VERSION_TAG.nupkg"
        STARTUP_SCRIPT_PATH="/workspace/startup-$$VERSION_TAG.sh"
        AR_BASE_URL="https://$$LOCATION-artifactregistry.googleapis.com/v1/projects/$$PROJECT_ID/locations/$$LOCATION/repositories/$$REPO_NAME/files"

        echo "#!/bin/bash" > $$STARTUP_SCRIPT_PATH
        echo "echo \"Startup script running for version $$VERSION_TAG\"" >> $$STARTUP_SCRIPT_PATH
        echo "apt-get update -y" >> $$STARTUP_SCRIPT_PATH
        echo "apt-get install -y unzip python3 python3-pip curl jq" >> $$STARTUP_SCRIPT_PATH
        echo "TOKEN=$$(curl -s -H \\\"Metadata-Flavor: Google\\\" \\\"http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token\\\" | jq -r .access_token)" >> $$STARTUP_SCRIPT_PATH
        echo "curl -H \\\"Authorization: Bearer $$TOKEN\\\" \\" >> $$STARTUP_SCRIPT_PATH
        echo "  -o /tmp/$$FILE_NAME \\" >> $$STARTUP_SCRIPT_PATH
        echo "  \\\"$$AR_BASE_URL/$$FILE_NAME?alt=media\\\"" >> $$STARTUP_SCRIPT_PATH
        echo "mkdir -p /opt/python-app" >> $$STARTUP_SCRIPT_PATH
        echo "unzip -o /tmp/$$FILE_NAME -d /opt/python-app" >> $$STARTUP_SCRIPT_PATH
        echo "python3 /opt/python-app/package/app.py" >> $$STARTUP_SCRIPT_PATH

        chmod +x $$STARTUP_SCRIPT_PATH

  # Step 5: Create Instance Template
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create Instance Template'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        VERSION=$$VERSION_TAG
        STARTUP_SCRIPT_FILE="/workspace/startup-$$VERSION.sh"

        gcloud compute instance-templates create vamsi-template-$$VERSION \
          --machine-type=e2-medium \
          --image-family=ubuntu-2204-lts \
          --image-project=ubuntu-os-cloud \
          --tags=http-server,https-server \
          --metadata-from-file startup-script=$$STARTUP_SCRIPT_FILE

  # Step 6: Create or Update MIG
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'Create or Update MIG'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        source /workspace/version.env
        MIG_NAME="vamsi-mig"
        TEMPLATE_NAME="vamsi-template-$$VERSION_TAG"
        ZONE="us-central1-a"

        if ! gcloud compute instance-groups managed describe $$MIG_NAME --zone=$$ZONE > /dev/null 2>&1; then
          echo "Creating new MIG with template $$TEMPLATE_NAME"
          gcloud compute instance-groups managed create $$MIG_NAME \
            --base-instance-name=vamsi-instance \
            --template=$$TEMPLATE_NAME \
            --size=1 \
            --zone=$$ZONE
        else
          echo "MIG exists. Updating template to $$TEMPLATE_NAME"
          gcloud compute instance-groups managed set-instance-template $$MIG_NAME \
            --template=$$TEMPLATE_NAME \
            --zone=$$ZONE

          echo "Triggering rolling restart..."
          gcloud compute instance-groups managed rolling-action restart $$MIG_NAME \
            --zone=$$ZONE

options:
  logging: CLOUD_LOGGING_ONLY
  defaultLogsBucketBehavior: REGIONAL_USER_OWNED_BUCKET
